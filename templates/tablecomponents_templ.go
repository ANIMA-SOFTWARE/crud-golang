// Code generated by templ@v0.2.364 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"main/types"
	"main/util"
	"strings"
)

func TableBase(TableData types.Table) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"grid-container\"><input class=\"grid-search\" type=\"search\" name=\"search\" value=\"\" placeholder=\"Search\" hx-post=\"/data/users/search\" hx-trigger=\"keyup changed delay:500ms, search\" hx-target=\"._tablebase tbody\" hx-swap=\"innerHTML\"><table class=\"_tablebase\" style=\"width: 100%;\"><thead>")
		if err != nil {
			return err
		}
		err = TableHeaders(TableData).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</thead><tbody>")
		if err != nil {
			return err
		}
		for i := 0; i < len(TableData.Rows()); i++ {
			err = TableRow(TableData.Rows()[i]).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		err = TableRowNew(TableData).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tbody></table></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TableHeaders(TableData types.Table) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr>")
		if err != nil {
			return err
		}
		for _, fieldName := range TableData.Fields() {
			if !strings.Contains(fieldName, "_") {
				_, err = templBuffer.WriteString("<th>")
				if err != nil {
					return err
				}
				var var_3 string = fieldName
				_, err = templBuffer.WriteString(templ.EscapeString(var_3))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			} else {
				_, err = templBuffer.WriteString("<th style=\"display:none\">")
				if err != nil {
					return err
				}
				var var_4 string = fieldName
				_, err = templBuffer.WriteString(templ.EscapeString(var_4))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</th>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("<th>")
		if err != nil {
			return err
		}
		var_5 := `Edit`
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TableRowEdit(RowData types.TableRow) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_6 := templ.GetChildren(ctx)
		if var_6 == nil {
			var_6 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr class=\"_tablerowedit\">")
		if err != nil {
			return err
		}
		for k := 0; k < len(RowData.FieldNames()); k++ {
			_, err = templBuffer.WriteString("<td><input name=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(RowData.FieldNames()[k]))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" value=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(RowData.Value(k)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<td><button class=\"btn\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/data/" + RowData.Table().TableName() + "/id=" + util.IntToStr(RowData.GetID())))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"._tablerowedit\" hx-swap=\"outerHTML\" hx-include=\"closest tr\"><i class=\"fa fa-close\"></i></button><button class=\"btn\" hx-put=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/data/" + RowData.Table().TableName() + "/id=" + util.IntToStr(RowData.GetID())))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"._tablerowedit\" hx-swap=\"outerHTML\" hx-include=\"closest tr\"><i class=\"fa fa fa-floppy-o\"></i></button></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TableRowNew(TableData types.Table) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr class=\"newrow\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/data/" + TableData.TableName() + "/page=" + util.IntToStr(TableData.NextPageNumber())))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"outerHTML\">")
		if err != nil {
			return err
		}
		for _, fieldName := range TableData.Fields() {
			if !strings.Contains(fieldName, "_") {
				_, err = templBuffer.WriteString("<td></td>")
				if err != nil {
					return err
				}
			}
		}
		_, err = templBuffer.WriteString("<td><button class=\"btn\" hx-post=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/data/" + TableData.TableName() + "/new"))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-swap=\"beforebegin\" hx-target=\"closest .newrow\"><i class=\"fa fa-plus-square-o\"></i></button></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TableRow(RowData types.TableRow) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_8 := templ.GetChildren(ctx)
		if var_8 == nil {
			var_8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr class=\"_tablerow\">")
		if err != nil {
			return err
		}
		for k := 0; k < len(RowData.FieldNames()); k++ {
			_, err = templBuffer.WriteString("<td>")
			if err != nil {
				return err
			}
			var var_9 string = RowData.Value(k)
			_, err = templBuffer.WriteString(templ.EscapeString(var_9))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<td><button class=\"btn\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString("/data/" + RowData.Table().TableName() + "/id=" + util.IntToStr(RowData.GetID()) + "/edit"))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest tr\" hx-swap=\"outerHTML\"><i class=\"fa fa-edit\"></i></button></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TableRows(TableData types.Table) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_10 := templ.GetChildren(ctx)
		if var_10 == nil {
			var_10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		for i := 0; i < len(TableData.Rows()); i++ {
			_, err = templBuffer.WriteString("<tr class=\"_tablerow\">")
			if err != nil {
				return err
			}
			for k := 0; k < len(TableData.Fields()); k++ {
				_, err = templBuffer.WriteString("<td>")
				if err != nil {
					return err
				}
				var var_11 string = TableData.Rows()[i].Value(k)
				_, err = templBuffer.WriteString(templ.EscapeString(var_11))
				if err != nil {
					return err
				}
				_, err = templBuffer.WriteString("</td>")
				if err != nil {
					return err
				}
			}
			_, err = templBuffer.WriteString("<td><button class=\"btn\" hx-get=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString("/data/" + TableData.TableName() + "/id=" + util.IntToStr(TableData.Rows()[i].GetID()) + "/edit"))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-target=\"closest tr\" hx-swap=\"outerHTML\"><i class=\"fa fa-edit\"></i></button></td></tr>")
			if err != nil {
				return err
			}
		}
		err = TableRowNew(TableData).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
